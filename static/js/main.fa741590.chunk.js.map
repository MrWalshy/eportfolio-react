{"version":3,"sources":["components/home.component.js","components/projects.component.js","components/contact.component.js","App.js","serviceWorker.js","index.js"],"names":["Home","Container","className","Row","Col","sm","id","Component","Projects","Contact","App","Navbar","collapseOnSelect","bg","variant","expand","fixed","Brand","href","Toggle","aria-controls","Collapse","Nav","to","md","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yWAMqBA,E,iLAEb,OACI,kBAACC,EAAA,EAAD,CAAWC,UAAU,kBACjB,kBAACC,EAAA,EAAD,CAAKD,UAAU,2CACX,kBAACE,EAAA,EAAD,CAAKC,GAAI,IACL,yBAAKC,GAAG,YAAYJ,UAAU,SAGlC,kBAACE,EAAA,EAAD,KACI,wBAAIE,GAAG,SAAP,gBACA,uBAAGJ,UAAU,QAAb,+B,GAXUK,aCJbC,E,iLAEb,OACI,yBAAKN,UAAU,kBACX,kD,GAJsBK,aCAjBE,E,iLAEb,OACI,yBAAKP,UAAU,kBACX,iD,GAJqBK,aC+DtBG,MAlDf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKR,UAAU,OACb,gCACE,kBAACS,EAAA,EAAD,CAAQC,kBAAgB,EAACC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,KAAKC,MAAM,OAClE,kBAACL,EAAA,EAAOM,MAAR,CAAcC,KAAK,KAAnB,gBACA,kBAACP,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,WAC7B,kBAACT,EAAA,EAAOU,SAAR,CAAiBf,GAAG,UAClB,kBAACgB,EAAA,EAAD,CAAKpB,UAAU,UAAUI,GAAG,aAC1B,kBAACgB,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,GAAI,IAAKrB,UAAU,YAAzB,SAKF,kBAACoB,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,GAAI,YAAarB,UAAU,YAAjC,aAKF,kBAACoB,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,GAAI,WAAYrB,UAAU,YAAhC,gBAWV,kBAACD,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKoB,GAAI,IACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3B,IACjC,kBAAC,IAAD,CAAO0B,KAAK,YAAYC,UAAWnB,IACnC,kBAAC,IAAD,CAAOkB,KAAK,WAAWC,UAAWlB,WC3C9BmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAEL,kBAAC,IAAD,CAAeC,SAAUC,qBACrB,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fa741590.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nexport default class Home extends Component {\r\n    render() {\r\n        return (\r\n            <Container className=\"pt-5 mt-5 px-0\">\r\n                <Row className=\"justify-content-center text-center mx-0\">\r\n                    <Col sm={12}>\r\n                        <div id=\"mainImage\" className=\"p-3\"></div>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <h1 id=\"title\">Morgan Walsh</h1>\r\n                        <p className=\"lead\">Full-Stack Developer</p>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Projects extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"pt-5 mt-5 px-0\">\r\n                <h1>Projects Page</h1>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Contact extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"pt-5 mt-5 px-0\">\r\n                <h1>Contact Page</h1>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport { BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom';\n\nimport Home from './components/home.component';\nimport Projects from './components/projects.component';\nimport Contact from './components/contact.component';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header>\n          <Navbar collapseOnSelect bg=\"dark\" variant=\"dark\" expand=\"lg\" fixed=\"top\">\n            <Navbar.Brand href=\"#\">Morgan Walsh</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"navbar\" />\n            <Navbar.Collapse id=\"navbar\">\n              <Nav className=\"ml-auto\" id=\"navbarNav\">\n                <Nav>\n                  <Link to={\"/\"} className=\"nav-link\">\n                    Home\n                  </Link>\n                </Nav>\n\n                <Nav>\n                  <Link to={\"/projects\"} className=\"nav-link\">\n                    Projects\n                  </Link>\n                </Nav>\n\n                <Nav>\n                  <Link to={\"/contact\"} className=\"nav-link\">\n                    Contact\n                  </Link>\n                </Nav>\n                {/* <Nav.Link to={\"/projects\"}>Projects</Nav.Link>\n                <Nav.Link to={\"/contact\"}>Contact</Nav.Link> */}\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n        </header>\n\n        <Container>\n          <Row>\n            <Col md={12}>\n              <Switch>\n                <Route exact path=\"/\" component={Home}/>\n                <Route path=\"/projects\" component={Projects} />\n                <Route path=\"/contact\" component={Contact} />\n              </Switch>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    // basename is added so GitHub Pages works\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}